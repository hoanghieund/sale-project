import ColorCircle from "@/components/common/ColorCircle";
import QuantitySelector from "@/components/common/QuantitySelector";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { cartService } from "@/services/cartService";
import { Product } from "@/types";
import { getColorValue } from "@/utils/colors";
import { formatCurrencyUSD } from "@/utils/formatters";
import { useVariantProduct } from "@/utils/productUtils";
import parse from "html-react-parser";
import { Star } from "lucide-react";
import { useState } from "react";

/**
 * @interface ProductInfoProps
 * @description ƒê·ªãnh nghƒ©a c√°c props cho component ProductInfo.
 * @property {Product} product - ƒê·ªëi t∆∞·ª£ng s·∫£n ph·∫©m.
 * @property {Shop} shop - ƒê·ªëi t∆∞·ª£ng c·ª≠a h√†ng.
 * @property {Record<number, number>} selectedVariantValues - Gi√° tr·ªã bi·∫øn th·ªÉ ƒë√£ ch·ªçn.
 * @property {(values: Record<number, number>) => void} setSelectedVariantValues - Callback c·∫≠p nh·∫≠t gi√° tr·ªã bi·∫øn th·ªÉ ƒë√£ ch·ªçn.
 * @property {number | null} selectedSku - ID c·ªßa SKU ƒë√£ ch·ªçn.
 * @property {(skuId: number | null) => void} setSelectedSku - Callback c·∫≠p nh·∫≠t SKU ƒë√£ ch·ªçn.
 */
interface ProductInfoProps {
  product: Product;
  className?: string;
}

/**
 * ProductInfo - Component hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
 * @param {ProductInfoProps} props - C√°c props c·ªßa component.
 */
const ProductInfo = ({ product, className }: ProductInfoProps) => {
  const [quantity, setQuantity] = useState(1);
  const { toast } = useToast();

  // L∆∞u tr·ªØ c√°c gi√° tr·ªã bi·∫øn th·ªÉ ƒë√£ ch·ªçn theo variantId
  const [selectedVariantValues, setSelectedVariantValues] = useState<
    Record<string, number>
  >({});

  const variantProduct = useVariantProduct(product);

  // X√°c ƒë·ªãnh xem n√∫t c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
  const isAddToCartDisabled =
    product.optionDTOs && product.optionDTOs.length > 0
      ? Object.keys(selectedVariantValues).length !== variantProduct.length
      : false;

  /**
   * @function handleAddToCart
   * @description X·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Th√™m v√†o gi·ªè".
   * Ki·ªÉm tra xem t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a tr∆∞·ªõc khi th√™m v√†o gi·ªè.
   */
  const handleAddToCart = async () => {
    // N·∫øu n√∫t b·ªã v√¥ hi·ªáu h√≥a (t·ª©c l√† ch∆∞a ch·ªçn ƒë·ªß bi·∫øn th·ªÉ), hi·ªÉn th·ªã l·ªói v√† d·ª´ng.
    if (isAddToCartDisabled) {
      toast({
        title: "L·ªói",
        description:
          "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß c√°c bi·∫øn th·ªÉ s·∫£n ph·∫©m tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng.",
        variant: "destructive",
      });
      return;
    }

    try {
      // G·ªçi API th√™m v√†o gi·ªè h√†ng
      await cartService.addToCart(
        { id: product.id },
        selectedVariantValues.fitId,
        selectedVariantValues.printLocationId,
        selectedVariantValues.colorId,
        selectedVariantValues.sizeId,
        quantity
      );
      toast({
        title: "Th√†nh c√¥ng",
        description: "ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.",
      });
      setQuantity(1);
      setSelectedVariantValues({});
    } catch (error) {
      console.log("üöÄ ~ handleAddToCart ~ error:", error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      {/* Product Info */}
      <div className="space-y-2">
        {/* Ti√™u ƒë·ªÅ: ∆∞u ti√™n k√≠ch th∆∞·ªõc nh·ªè h∆°n tr√™n mobile, tƒÉng ·ªü md+ */}
        <h1 className="text-2xl md:text-3xl font-bold">{product.title}</h1>

        <div className="space-y-1">
          {/* Kh·ªëi rating/b√°n/badges: cho ph√©p wrap v√† t·∫°o kho·∫£ng c√°ch ƒë·ªÅu khi xu·ªëng d√≤ng */}
          <div className="flex flex-wrap items-center gap-x-2 gap-y-1">
            <div className="flex items-center gap-0.5">
              <span className="text-base font-medium">{product.star || 0}</span>
              <Star className="fill-yellow-400 text-yellow-400 w-4 h-4" />
            </div>
            <span className="text-foreground/50 text-sm">
              ({product.totalReview || 0} ƒë√°nh gi√°)
            </span>
            <span className="text-foreground text-sm">
              ƒê√£ b√°n {product.totalProductSold || 0}
            </span>
            {product.isNew && (
              <>
                <span className="bg-new/10 text-new px-2 py-1 rounded-md text-sm font-medium">
                  M·ªõi
                </span>
              </>
            )}
            {product.isFlashSale && (
              <>
                <span className="bg-trending/10 text-trending px-2 py-1 rounded-md text-sm font-medium">
                  Flash Sale
                </span>
              </>
            )}
          </div>
        </div>

        <div className="text-xl md:text-2xl font-bold text-destructive">
          {formatCurrencyUSD(product.priceSale || 0)}
        </div>
        <div className="space-x-1">
          {/* Gi√° g·∫°ch: responsive theo md */}
          <span className="text-base md:text-lg text-foreground/50 line-through">
            {formatCurrencyUSD(product.price || 0)}
          </span>
          <span className="bg-destructive/10 text-destructive px-2 py-1 rounded-md text-sm font-medium">
            -{product.discount.discount_percent}%
          </span>
        </div>
      </div>

      {/* Variants Selection */}
      {variantProduct && variantProduct.length > 0 && (
        <div className="space-y-2">
          {variantProduct.map(variant => (
            <div key={variant.name} className="space-y-2">
              {/* Ti√™u ƒë·ªÅ nh√≥m bi·∫øn th·ªÉ: nh·ªè ·ªü mobile, chu·∫©n ·ªü md+ */}
              <h3 className="font-medium text-gray-700 text-sm md:text-base">
                {variant.name}
              </h3>
              <div className="flex flex-wrap gap-2">
                {variant.values?.map(value => (
                  <div key={value.id}>
                    {" "}
                    {/* Bao b·ªçc b·∫±ng div ho·∫∑c Fragment */}
                    {variant.name.toLowerCase() === "color" ? (
                      <ColorCircle
                        color={getColorValue(value.name)}
                        isSelected={
                          selectedVariantValues[variant.slug] === value.id
                        }
                        onClick={() => {
                          const newSelectedValues = {
                            ...selectedVariantValues,
                            [variant.slug]: value.id,
                          };
                          setSelectedVariantValues(newSelectedValues);
                          setQuantity(1);
                        }}
                      />
                    ) : (
                      <Button
                        className="px-3"
                        variant={
                          selectedVariantValues[variant.slug] === value.id
                            ? "default"
                            : "outline"
                        }
                        onClick={() => {
                          const newSelectedValues = {
                            ...selectedVariantValues,
                            [variant.slug]: value.id,
                          };
                          setSelectedVariantValues(newSelectedValues);
                          setQuantity(1);
                        }}
                      >
                        {value.name}
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Quantity */}
      {/* Kh·ªëi s·ªë l∆∞·ª£ng: tƒÉng kho·∫£ng c√°ch ·ªü md ƒë·ªÉ tho√°ng h∆°n */}
      <div className="flex items-center gap-2 md:gap-3 mb-1">
        <span className="text-gray-700">S·ªë l∆∞·ª£ng:</span>
        <QuantitySelector quantity={quantity} onQuantityChange={setQuantity} />
      </div>

      {/* Actions: stack d·ªçc ·ªü sm, n·∫±m ngang ·ªü md+; kho·∫£ng c√°ch l·ªõn h∆°n */}
      <div className="flex gap-2 sm:flex-col md:flex-row mb-1">
        <Button
          onClick={() => handleAddToCart()}
          className="w-full md:flex-1"
          disabled={isAddToCartDisabled} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c ch·ªçn ƒë·∫ßy ƒë·ªß
        >
          Th√™m v√†o gi·ªè
        </Button>
        <Button
          onClick={() => {
            // Mua ngay s·∫£n ph·∫©m v·ªõi bi·∫øn th·ªÉ ƒë√£ ch·ªçn
          }}
          className="w-full md:flex-1"
          variant="outline"
        >
          Mua ngay
        </Button>
      </div>

      <Accordion type="single" collapsible className="w-full">
        {product.content ? (
          <AccordionItem value="product-description">
            <AccordionTrigger className="text-base font-semibold">
              M√¥ t·∫£ s·∫£n ph·∫©m
            </AccordionTrigger>
            {/* T·ªëi ∆∞u typography cho n·ªôi dung m√¥ t·∫£, gi·ªØ max-width none ƒë·ªÉ full width */}
            <AccordionContent className="prose max-w-none prose-p:my-2 prose-ul:my-2 prose-li:my-1">
              {product.content ? (
                <div className="text-foreground leading-normal text-sm md:text-base">
                  {parse(product.content)}
                </div>
              ) : (
                <p className="text-foreground/50 italic">
                  Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt cho s·∫£n ph·∫©m n√†y.
                </p>
              )}
            </AccordionContent>
          </AccordionItem>
        ) : null}

        <AccordionItem value="product-specifications">
          <AccordionTrigger className="text-base font-semibold">
            Th√¥ng s·ªë s·∫£n ph·∫©m
          </AccordionTrigger>
          {/* Grid 1 c·ªôt tr√™n mobile, 2 c·ªôt t·ª´ md; kho·∫£ng c√°ch gi·∫£m nh·∫π ƒë·ªÉ kh·ªõp design-system */}
          <AccordionContent className="grid grid-cols-1 gap-x-6 gap-y-3">
            {product.brand && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Th∆∞∆°ng hi·ªáu:
                </span>
                <span className="text-foreground">{product.brand}</span>
              </div>
            )}
            {product.material && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Ch·∫•t li·ªáu:
                </span>
                <span className="text-foreground">{product.material}</span>
              </div>
            )}
            {product.origin && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Xu·∫•t x·ª©:
                </span>
                <span className="text-foreground">{product.origin}</span>
              </div>
            )}
            {product.style && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Phong c√°ch:
                </span>
                <span className="text-foreground">{product.style}</span>
              </div>
            )}
            {(product.height || product.width || product.length) && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  K√≠ch th∆∞·ªõc:
                </span>
                <span className="text-foreground">
                  {[
                    product.height && `Cao ${product.height}cm`,
                    product.width && `R·ªông ${product.width}cm`,
                    product.length && `D√†i ${product.length}cm`,
                  ]
                    .filter(Boolean)
                    .join(", ")}
                </span>
              </div>
            )}
            {product.weight && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Tr·ªçng l∆∞·ª£ng:
                </span>
                <span className="text-foreground">{product.weight}g</span>
              </div>
            )}
            {product.isNew !== undefined && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  S·∫£n ph·∫©m m·ªõi:
                </span>
                <span className="text-foreground">
                  {product.isNew ? "C√≥" : "Kh√¥ng"}
                </span>
              </div>
            )}
            {product.isFlashSale !== undefined && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Flash sale:
                </span>
                <span className="text-foreground">
                  {product.isFlashSale ? "C√≥" : "Kh√¥ng"}
                </span>
              </div>
            )}
            {product.isTrending !== undefined && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Xu h∆∞·ªõng:
                </span>
                <span className="text-foreground">
                  {product.isTrending ? "C√≥" : "Kh√¥ng"}
                </span>
              </div>
            )}
            {product.timeCreate && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Ng√†y ƒëƒÉng:
                </span>
                <span className="text-foreground">{product.timeCreate}</span>
              </div>
            )}
            {product.categoryDto && (
              <div className="flex border-b border-border py-2">
                <span className="font-medium text-foreground w-1/3">
                  Danh m·ª•c:
                </span>
                <span className="text-foreground">
                  {product.categoryDto.parent?.name &&
                    `${product.categoryDto.parent.name} > `}
                  {product.categoryDto.name}
                </span>
              </div>
            )}
            {product.totalReview !== undefined && (
              <div className="flex">
                <span className="font-medium text-foreground w-1/3">
                  S·ªë ƒë√°nh gi√°:
                </span>
                <span className="text-foreground">{product.totalReview}</span>
              </div>
            )}
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
};

export default ProductInfo;
