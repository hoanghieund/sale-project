import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";

import CategoryInfo from "@/components/common/CategoryInfo";
import CustomPagination from "@/components/common/CustomPagination";
import EmptyStateDisplay from "@/components/common/EmptyStateDisplay";
import ProductCardSimple from "@/components/common/ProductCardSimple";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import {
  Card,
  CardContent,
  CardDescription,
  CardTitle,
} from "@/components/ui/card";
import { productService } from "@/features/users/sub-category/services/productServices";
import { subcategoryService } from "@/features/users/sub-category/services/subcategoryServices";
import { Category, Product } from "@/types";

/**
 * SubcategoryPage - Trang hi·ªÉn th·ªã danh m·ª•c con
 * Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc subcategory
 */
const SubcategoryPage = () => {
  const { subcategoryId } = useParams<{ subcategoryId: string }>();
  const [subcategory, setSubcategory] = useState<Category | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [currentPage, setCurrentPage] = useState(1); // State cho trang hi·ªán t·∫°i, m·∫∑c ƒë·ªãnh l√† 1
  const [totalPages, setTotalPages] = useState(1); // State cho t·ªïng s·ªë trang, m·∫∑c ƒë·ªãnh l√† 1

  useEffect(() => {
    /**
     * @function fetchSubcategoryAndProducts
     * @description H√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y d·ªØ li·ªáu danh m·ª•c con v√† s·∫£n ph·∫©m li√™n quan t·ª´ API.
     * S·ª≠ d·ª•ng `subcategoryId` t·ª´ `useParams` ƒë·ªÉ g·ªçi API.
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i `subcategory`, `products` v√† `loading`.
     * @param {string} id - Id c·ªßa danh m·ª•c con.
     * @returns {void}
     */
    const fetchSubcategoryAndProducts = async (id: string , page : number = 1) => {
      try {
        // L·∫•y th√¥ng tin danh m·ª•c con t·ª´ API
        const subcategoryData = await subcategoryService.getSubcategoryById(
          parseInt(id)
        );
        setSubcategory(subcategoryData); // C·∫≠p nh·∫≠t tr·∫°ng th√°i danh m·ª•c con

        // L·∫•y danh s√°ch s·∫£n ph·∫©m theo ID danh m·ª•c con v√† trang hi·ªán t·∫°i
        const productsData = await productService.getProductsBySubCategoryId(
          subcategoryData.parent?.id, 
          Number(subcategoryData.id),
          page - 1,
          12
        );
        setProducts(productsData.content); // C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m
        setTotalPages(productsData.totalPages); // C·∫≠p nh·∫≠t t·ªïng s·ªë trang
      } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu danh m·ª•c con ho·∫∑c s·∫£n ph·∫©m:", error);
        setSubcategory(null); // ƒê·∫∑t danh m·ª•c con v·ªÅ null n·∫øu c√≥ l·ªói
        setProducts([]); // ƒê·∫∑t s·∫£n ph·∫©m v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
      }
    };

    // G·ªçi h√†m fetchSubcategoryAndProducts khi subcategoryId thay ƒë·ªïi
    if (subcategoryId) {
      fetchSubcategoryAndProducts(subcategoryId , currentPage);
    }
  }, [subcategoryId, currentPage]); // Dependency array ƒë·∫£m b·∫£o useEffect ch·∫°y l·∫°i khi subcategoryId ho·∫∑c currentPage thay ƒë·ªïi

  /**
   * @function handlePageChange
   * @description C·∫≠p nh·∫≠t tr·∫°ng th√°i `currentPage` khi ng∆∞·ªùi d√πng chuy·ªÉn trang.
   * ƒê·ªìng th·ªùi g·ªçi l·∫°i `fetchSubcategoryAndProducts` ƒë·ªÉ t·∫£i d·ªØ li·ªáu cho trang m·ªõi.
   * @param {number} page - S·ªë trang m·ªõi.
   * @returns {void}
   */
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  if (!subcategory) {
    return <EmptyStateDisplay />;
  }

  return (
    <div className="bg-background min-h-screen">
      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4">
        <div className="container mx-auto px-4">
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/">Trang ch·ªß</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/categories">Danh m·ª•c</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to={`/category/${subcategory.parent?.id}`}>
                    {subcategory.parent?.name}
                  </Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbPage>{subcategory.name}</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* S·ª≠ d·ª•ng component CategoryInfo */}
        <CategoryInfo
          category={subcategory}
          parentCategory={subcategory.parent}
          type="subcategory"
        />

        {/* Filters and Sort */}
        <Card className="mb-8">
          <CardContent className="pt-6">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <span className="text-gray-600 font-medium">
                  Hi·ªÉn th·ªã {products.length} / {subcategory.totalProduct} s·∫£n
                  ph·∫©m
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
          {products.length > 0 ? (
            products.map(product => (
              <ProductCardSimple key={product.id} product={product} />
            ))
          ) : (
            <Card className="text-center text-gray-500 col-span-full py-12">
              <CardContent>
                <div className="text-6xl mb-4">üõçÔ∏è</div>
                <CardTitle className="text-lg mb-2">Ch∆∞a c√≥ s·∫£n ph·∫©m</CardTitle>
                <CardDescription>
                  H√£y quay l·∫°i sau ƒë·ªÉ xem c√°c s·∫£n ph·∫©m m·ªõi nh·∫•t
                </CardDescription>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Pagination */}
        <div className="flex justify-center mt-8">
          <CustomPagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={handlePageChange}
          />
        </div>
      </div>
    </div>
  );
};

export default SubcategoryPage;
