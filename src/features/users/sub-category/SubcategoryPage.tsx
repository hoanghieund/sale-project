import CategoryInfo from "@/components/common/CategoryInfo";
import ProductCardSimple from "@/components/common/ProductCardSimple";
import { productService } from "@/features/users/sub-category/services/productServices";
import { subcategoryService } from "@/features/users/sub-category/services/subcategoryServices";
import { Category, Product } from "@/types";
import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";

// Import c√°c component Shadcn
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import {
  Card,
  CardContent,
  CardDescription,
  CardTitle,
} from "@/components/ui/card";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

/**
 * SubcategoryPage - Trang hi·ªÉn th·ªã danh m·ª•c con
 * Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc subcategory
 */
const SubcategoryPage = () => {
  const { subcategorySlug } = useParams<{ subcategorySlug: string }>();
  const [subcategory, setSubcategory] = useState<Category | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState("newest");

  useEffect(() => {
    /**
     * @function fetchSubcategoryAndProducts
     * @description H√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y d·ªØ li·ªáu danh m·ª•c con v√† s·∫£n ph·∫©m li√™n quan t·ª´ API.
     * S·ª≠ d·ª•ng `subcategorySlug` t·ª´ `useParams` ƒë·ªÉ g·ªçi API.
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i `subcategory`, `products` v√† `loading`.
     * @param {string} slug - Slug c·ªßa danh m·ª•c con.
     * @returns {void}
     */
    const fetchSubcategoryAndProducts = async (slug: string) => {
      setLoading(true); // B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu, ƒë·∫∑t tr·∫°ng th√°i loading l√† true
      try {
        // L·∫•y th√¥ng tin danh m·ª•c con t·ª´ API
        const subcategoryData = await subcategoryService.getSubcategoryBySlug(
          slug,
        );
        setSubcategory(subcategoryData); // C·∫≠p nh·∫≠t tr·∫°ng th√°i danh m·ª•c con

        // L·∫•y danh s√°ch s·∫£n ph·∫©m theo ID danh m·ª•c con
        const productsData = await productService.getProductsBySubCategoryId(
          subcategoryData.id,
        );
        setProducts(productsData.data.data); // C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m
      } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu danh m·ª•c con ho·∫∑c s·∫£n ph·∫©m:", error);
        setSubcategory(null); // ƒê·∫∑t danh m·ª•c con v·ªÅ null n·∫øu c√≥ l·ªói
        setProducts([]); // ƒê·∫∑t s·∫£n ph·∫©m v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
      } finally {
        setLoading(false); // Ho√†n t·∫•t t·∫£i d·ªØ li·ªáu, ƒë·∫∑t tr·∫°ng th√°i loading l√† false
      }
    };

    // G·ªçi h√†m fetchSubcategoryAndProducts khi subcategorySlug thay ƒë·ªïi
    if (subcategorySlug) {
      fetchSubcategoryAndProducts(subcategorySlug);
    }
  }, [subcategorySlug]); // Dependency array ƒë·∫£m b·∫£o useEffect ch·∫°y l·∫°i khi subcategorySlug thay ƒë·ªïi

  const handleSortChange = (value: string) => {
    setSortBy(value);
    console.log(`ƒê√£ ch·ªçn s·∫Øp x·∫øp theo: ${value}`);

    // Logic s·∫Øp x·∫øp s·∫£n ph·∫©m
    let sortedProducts = [...products];

    switch (value) {
      case "price-low":
        // S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ th·∫•p ƒë·∫øn cao (c·∫ßn ProductSku.price khi c√≥ d·ªØ li·ªáu th·ª±c)
        // Hi·ªán t·∫°i d√πng ID l√†m placeholder
        sortedProducts.sort((a, b) => a.id - b.id);
        break;
      case "price-high":
        // S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° t·ª´ cao ƒë·∫øn th·∫•p (c·∫ßn ProductSku.price khi c√≥ d·ªØ li·ªáu th·ª±c)
        // Hi·ªán t·∫°i d√πng ID l√†m placeholder
        sortedProducts.sort((a, b) => b.id - a.id);
        break;
      case "popular":
        // S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng b√°n ch·∫°y nh·∫•t
        sortedProducts.sort((a, b) => b.totalProductSold - a.totalProductSold);
        break;
      case "rating":
        // S·∫Øp x·∫øp s·∫£n ph·∫©m theo ƒë√°nh gi√° cao nh·∫•t
        sortedProducts.sort((a, b) => b.star - a.star);
        break;
      case "newest":
      default:
        // S·∫Øp x·∫øp s·∫£n ph·∫©m theo ng√†y t·∫°o m·ªõi nh·∫•t
        sortedProducts.sort(
          (a, b) =>
            new Date(b.createDate).getTime() - new Date(a.createDate).getTime(),
        );
        break;
    }

    setProducts(sortedProducts); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">ƒêang t·∫£i...</div>
      </div>
    );
  }

  if (!subcategory) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Kh√¥ng t√¨m th·∫•y danh m·ª•c</div>
      </div>
    );
  }

  return (
    <div className="bg-background min-h-screen">
      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4">
        <div className="container mx-auto px-4">
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/">Trang ch·ªß</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/categories">Danh m·ª•c</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to={`/category/${subcategory.parent?.id}`}>
                    {subcategory.parent?.name}
                  </Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbPage>{subcategory.name}</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* S·ª≠ d·ª•ng component CategoryInfo */}
        <CategoryInfo
          category={subcategory}
          parentCategory={subcategory.parent}
          type="subcategory"
        />

        {/* Filters and Sort */}
        <Card className="mb-8">
          <CardContent className="pt-6">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <span className="text-gray-600 font-medium">
                  Hi·ªÉn th·ªã {products.length} / {subcategory.totalProduct} s·∫£n
                  ph·∫©m
                </span>
              </div>

              <div className="flex items-center gap-4">
                <span className="text-gray-600 font-medium">S·∫Øp x·∫øp theo:</span>
                <Select value={sortBy} onValueChange={handleSortChange}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="S·∫Øp x·∫øp theo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="newest">M·ªõi nh·∫•t</SelectItem>
                    <SelectItem value="price-low">Gi√° th·∫•p ƒë·∫øn cao</SelectItem>
                    <SelectItem value="price-high">Gi√° cao ƒë·∫øn th·∫•p</SelectItem>
                    <SelectItem value="popular">Ph·ªï bi·∫øn nh·∫•t</SelectItem>
                    <SelectItem value="rating">ƒê√°nh gi√° cao nh·∫•t</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
          {products.length > 0 ? (
            products.map(product => (
              <ProductCardSimple key={product.id} product={product} />
            ))
          ) : (
            <Card className="text-center text-gray-500 col-span-full py-12">
              <CardContent>
                <div className="text-6xl mb-4">üõçÔ∏è</div>
                <CardTitle className="text-lg mb-2">Ch∆∞a c√≥ s·∫£n ph·∫©m</CardTitle>
                <CardDescription>
                  H√£y quay l·∫°i sau ƒë·ªÉ xem c√°c s·∫£n ph·∫©m m·ªõi nh·∫•t
                </CardDescription>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Pagination */}
        <div className="flex justify-center mt-8">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious href="#" />
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#" isActive>
                  1
                </PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#">2</PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#">3</PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationEllipsis />
              </PaginationItem>
              <PaginationItem>
                <PaginationNext href="#" />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      </div>
    </div>
  );
};

export default SubcategoryPage;
