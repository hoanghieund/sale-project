import CategoryInfo from "@/components/common/CategoryInfo";
import ProductCardSimple from "@/components/common/ProductCardSimple";
import { Category, Product } from "@/types";
import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";

// Import c√°c component Shadcn
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import {
  Card,
  CardContent,
  CardDescription,
  CardTitle,
} from "@/components/ui/card";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

/**
 * SubcategoryPage - Trang hi·ªÉn th·ªã danh m·ª•c con
 * Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc subcategory
 */
const SubcategoryPage = () => {
  const { subcategorySlug } = useParams<{ subcategorySlug: string }>();
  const [subcategory, setSubcategory] = useState<Category | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState("newest");

  useEffect(() => {
    // TODO: Fetch subcategory data from API
    // T·∫°m th·ªüi s·ª≠ d·ª•ng mock data d·ª±a tr√™n subcategorySlug
    const getSubcategoryData = (slug: string) => {
      switch (slug) {
        case "ao-nam":
          return {
            id: 101,
            name: "√Åo nam",
            icon: "üëî",
            active: true,
            isShowSuggests: true,
            totalProduct: 350,
            parentId: 1,
            parent: {
              id: 1,
              name: "Th·ªùi trang",
              icon: "üëï",
              active: true,
              isShowSuggests: true,
              totalProduct: 1250,
            },
          };
        default:
          return {
            id: 101,
            name: "√Åo nam",
            icon: "üëî",
            active: true,
            isShowSuggests: true,
            totalProduct: 50,
            parentId: 1,
            parent: {
              id: 1,
              name: "Th·ªùi trang",
              icon: "üëï",
              active: true,
              isShowSuggests: true,
              totalProduct: 150,
            },
          };
      }
    };

    const mockSubcategory = getSubcategoryData(subcategorySlug || "");

    // Mock products data
    const mockProducts: Product[] = [
      {
        id: 101,
        name: "√Åo thun nam c·ªï tr√≤n", // Th√™m tr∆∞·ªùng name b·∫Øt bu·ªôc
        images: ["/assets/product-1.jpg"], // Th√™m tr∆∞·ªùng images b·∫Øt bu·ªôc
        title: "√Åo thun nam c·ªï tr√≤n",
        content: "√Åo thun nam c·ªï tr√≤n ch·∫•t li·ªáu cotton 100%",
        status: true,
        // price kh√¥ng c√≤n trong Product interface, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω qua ProductSku
        star: 4.5,
        totalProductSold: 120,
        isNew: true,
        isFlashSale: false,
        isTrending: true,
        discount: { id: 1, percent: 10, status: true, createDate: new Date() },
        categoriesId: 5,
        shopId: 1,
        createBy: "system",
        createDate: new Date(),
      },
      {
        id: 102,
        name: "Qu·∫ßn jean nam slim fit", // Th√™m tr∆∞·ªùng name b·∫Øt bu·ªôc
        images: ["/assets/product-2.jpg"], // Th√™m tr∆∞·ªùng images b·∫Øt bu·ªôc
        title: "Qu·∫ßn jean nam slim fit",
        content: "Qu·∫ßn jean nam slim fit m√†u xanh ƒë·∫≠m",
        status: true,
        // price kh√¥ng c√≤n trong Product interface, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω qua ProductSku
        star: 4.8,
        totalProductSold: 85,
        isNew: false,
        isFlashSale: true,
        isTrending: true,
        discount: { id: 2, percent: 15, status: true, createDate: new Date() },
        categoriesId: 5,
        shopId: 2,
        createBy: "system",
        createDate: new Date(),
      },
      {
        id: 103,
        name: "√Åo s∆° mi n·ªØ c√¥ng s·ªü", // Th√™m tr∆∞·ªùng name b·∫Øt bu·ªôc
        images: ["/assets/product-3.jpg"], // Th√™m tr∆∞·ªùng images b·∫Øt bu·ªôc
        title: "√Åo s∆° mi n·ªØ c√¥ng s·ªü",
        content: "√Åo s∆° mi n·ªØ c√¥ng s·ªü ch·∫•t li·ªáu l·ª•a cao c·∫•p",
        status: true,
        // price kh√¥ng c√≤n trong Product interface, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω qua ProductSku
        star: 4.6,
        totalProductSold: 95,
        isNew: true,
        isFlashSale: false,
        isTrending: true,
        categoriesId: 6,
        shopId: 3,
        createBy: "system",
        createDate: new Date(),
      },
      {
        id: 104,
        name: "V√°y li·ªÅn th√¢n d·ª± ti·ªác", // Th√™m tr∆∞·ªùng name b·∫Øt bu·ªôc
        images: ["/assets/product-4.jpg"], // Th√™m tr∆∞·ªùng images b·∫Øt bu·ªôc
        title: "V√°y li·ªÅn th√¢n d·ª± ti·ªác",
        content: "V√°y li·ªÅn th√¢n d·ª± ti·ªác m√†u ƒëen sang tr·ªçng",
        status: true,
        // price kh√¥ng c√≤n trong Product interface, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω qua ProductSku
        star: 4.9,
        totalProductSold: 65,
        isNew: true,
        isFlashSale: true,
        isTrending: true,
        discount: { id: 3, percent: 20, status: true, createDate: new Date() },
        categoriesId: 6,
        shopId: 1,
        createBy: "system",
        createDate: new Date(),
      },
    ];

    setSubcategory(mockSubcategory);
    setProducts(mockProducts);
    setLoading(false);
  }, [subcategorySlug]);

  const handleSortChange = (value: string) => {
    setSortBy(value);
    console.log(`ƒê√£ ch·ªçn s·∫Øp x·∫øp theo: ${value}`);

    // Logic s·∫Øp x·∫øp s·∫£n ph·∫©m
    let sortedProducts = [...products];

    switch (value) {
      case "price-low":
        // Gi·∫£ ƒë·ªãnh r·∫±ng product c√≥ tr∆∞·ªùng price
        // Khi c√≥ API th·ª±c t·∫ø, c√≥ th·ªÉ g·ªçi API v·ªõi tham s·ªë s·∫Øp x·∫øp
        sortedProducts.sort((a, b) => {
          // T·∫°m th·ªùi d√πng id ƒë·ªÉ demo, thay b·∫±ng price khi c√≥ d·ªØ li·ªáu th·ª±c
          return a.id - b.id;
        });
        break;
      case "price-high":
        sortedProducts.sort((a, b) => {
          // T·∫°m th·ªùi d√πng id ƒë·ªÉ demo, thay b·∫±ng price khi c√≥ d·ªØ li·ªáu th·ª±c
          return b.id - a.id;
        });
        break;
      case "popular":
        sortedProducts.sort((a, b) => b.totalProductSold - a.totalProductSold);
        break;
      case "rating":
        sortedProducts.sort((a, b) => b.star - a.star);
        break;
      case "newest":
      default:
        sortedProducts.sort(
          (a, b) =>
            new Date(b.createDate).getTime() - new Date(a.createDate).getTime()
        );
        break;
    }

    // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp
    setProducts(sortedProducts);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">ƒêang t·∫£i...</div>
      </div>
    );
  }

  if (!subcategory) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Kh√¥ng t√¨m th·∫•y danh m·ª•c</div>
      </div>
    );
  }

  return (
    <div className="bg-background min-h-screen">
      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4">
        <div className="container mx-auto px-4">
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/">Trang ch·ªß</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to="/categories">Danh m·ª•c</Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink asChild>
                  <Link to={`/category/${subcategory.parent?.id}`}>
                    {subcategory.parent?.name}
                  </Link>
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbPage>{subcategory.name}</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        {/* S·ª≠ d·ª•ng component CategoryInfo */}
        <CategoryInfo
          category={subcategory}
          parentCategory={subcategory.parent}
          type="subcategory"
        />

        {/* Filters and Sort */}
        <Card className="mb-8">
          <CardContent className="pt-6">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <span className="text-gray-600 font-medium">
                  Hi·ªÉn th·ªã {products.length} / {subcategory.totalProduct} s·∫£n
                  ph·∫©m
                </span>
              </div>

              <div className="flex items-center gap-4">
                <span className="text-gray-600 font-medium">S·∫Øp x·∫øp theo:</span>
                <Select value={sortBy} onValueChange={handleSortChange}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="S·∫Øp x·∫øp theo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="newest">M·ªõi nh·∫•t</SelectItem>
                    <SelectItem value="price-low">Gi√° th·∫•p ƒë·∫øn cao</SelectItem>
                    <SelectItem value="price-high">Gi√° cao ƒë·∫øn th·∫•p</SelectItem>
                    <SelectItem value="popular">Ph·ªï bi·∫øn nh·∫•t</SelectItem>
                    <SelectItem value="rating">ƒê√°nh gi√° cao nh·∫•t</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
          {products.length > 0 ? (
            products.map(product => (
              <ProductCardSimple key={product.id} product={product} />
            ))
          ) : (
            <Card className="text-center text-gray-500 col-span-full py-12">
              <CardContent>
                <div className="text-6xl mb-4">üõçÔ∏è</div>
                <CardTitle className="text-lg mb-2">Ch∆∞a c√≥ s·∫£n ph·∫©m</CardTitle>
                <CardDescription>
                  H√£y quay l·∫°i sau ƒë·ªÉ xem c√°c s·∫£n ph·∫©m m·ªõi nh·∫•t
                </CardDescription>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Pagination */}
        <div className="flex justify-center mt-8">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious href="#" />
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#" isActive>
                  1
                </PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#">2</PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationLink href="#">3</PaginationLink>
              </PaginationItem>
              <PaginationItem>
                <PaginationEllipsis />
              </PaginationItem>
              <PaginationItem>
                <PaginationNext href="#" />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      </div>
    </div>
  );
};

export default SubcategoryPage;
